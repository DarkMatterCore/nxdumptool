{
    "filename": {
        "label": "파일이름",
        "description": "출력 덤프에 사용되는 파일 이름입니다.\n잘못된 파일 시스템 문자는 자동으로 밑줄(\"_\")로 대체됩니다. 삽입된 SD 카드를 출력 저장소로 사용하는 경우 ASCII 문자만 유지됩니다. 이는 닌텐도의 FS 드라이버에 대한 제한 사항입니다.\n파일 확장자는 수정할 수 없으며 일부러 제외합니다."
    },

    "output_storage": {
        "label": "출력 저장소",
        "description": "덤프된 데이터가 기록될 저장소입니다. 이를 변경하면 출력 파일 시스템 제한에 더 잘 맞도록 출력 파일 이름이 자동으로 업데이트됩니다.\n연결된 USB 호스트를 사용하려면 libusb 기반 드라이버와 Python 호스트 스크립트가 필요합니다. 자세한 내용은 \"{}\"를 방문하세요.",
        "value_00": "SD 카드",
        "value_01": "USB 호스트",
        "value_02": "USB 대용량 저장소 ({})"
    },

    "prepend_key_area": {
        "label": "키영역 데이터 추가",
        "description": "초기 데이터 영역을 포함하는 출력 XCI 덤프에 전체 4KiB 길이의 키영역 블록을 추가합니다.키역역 데이터가 포함된 XCI 덤프는 \"전체 XCI\"라고도 한다. 기본적으로 사용할 수 없습니다."
    },

    "keep_certificate": {
        "label": "인증서 유지",
        "description": "각 개별 게임 카드를 명확하게 식별하는 데 사용되는 출력 XCI 덤프에서 게임 카드 인증서를 유지합니다. 기본적으로 비활성화되어 있습니다."
    },

    "trim_dump": {
        "label": "덤프 트림",
        "description": "마지막 HFS 파티션의 끝을 넘어 패딩 데이터를 제거하여 출력 XCI 덤프를 트리밍합니다. 기본적으로 비활성화되어 있습니다."
    },

    "calculate_checksum": {
        "label": "체크섬 계산",
        "description": "선택한 구성에 따라 덤프된 데이터에 대해 하나 이상의 CRC32 체크섬을 계산합니다. 체크섬은 데이터 무결성을 확인하는 데 유용합니다. 기본적으로 활성화됩니다."
    },

    "checksum_lookup_method": {
        "label": "체크섬 조회 방법",
        "description": "\"{0}\"가 활성화된 경우 이 옵션은 덤프 프로세스가 끝날 때 계산된 CRC32 체크섬의 유효성을 검사하는 데 사용되는 조회 방법을 결정합니다.\n\"{1}\"가 선택되면 계산된 체크섬은 이전에 다운로드했어야 하는 \"{2}\"에서 조회했습니다.\n\"{3}\"을(를) 선택하면 계산된 체크섬이 인터넷 연결 및 공개 HTTP 엔드포인트를 사용하여 조회됩니다.",
        "value_00": "없음"
    },

    "start_dump": "덤프 시작"
}
